package dev.akif.malwarenotifications.http;

import dev.akif.malwarenotifications.detection.DetectionService;
import dev.akif.malwarenotifications.detection.DetectionType;
import dev.akif.malwarenotifications.http.dto.DetectionAndDeviceDTO;
import dev.akif.malwarenotifications.http.dto.MalwareScanDTO;
import dev.akif.malwarenotifications.http.dto.PagedResponse;
import dev.akif.malwarenotifications.http.dto.SortableDetectionFields;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import lombok.val;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import java.util.Set;
import java.util.stream.Collectors;

@AllArgsConstructor
@RequestMapping("/detections")
@RestController
@Slf4j
public class DetectionController {
    private final DetectionService detectionService;

    @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
    PagedResponse<DetectionAndDeviceDTO> listDetections(@RequestParam(value = "page", required = false, defaultValue = "1") int page,
                                                        @RequestParam(value = "perPage", required = false, defaultValue = "10") int perPage,
                                                        @RequestParam(value = "sortBy", required = false) SortableDetectionFields sortBy,
                                                        @RequestParam(value = "ascending", required = false) Boolean ascending,
                                                        @RequestParam(value = "type", required = false) DetectionType detectionType) {
        val sortColumn = sortBy == null ? SortableDetectionFields.TIME.column : sortBy.column;
        val sortingByTime = SortableDetectionFields.TIME.column.equals(sortColumn);
        ascending = ascending == null ? !sortingByTime : ascending;

        val detectionTypes = detectionType == null ? DetectionType.all() : Set.of(detectionType);
        val pageRequest = PageRequest.of(page - 1, perPage, Sort.by(ascending ? Sort.Order.asc(sortColumn).nullsLast() : Sort.Order.desc(sortColumn).nullsLast()));

        log.info("Listing {} malware detections as {}", detectionTypes, pageRequest);

        return new PagedResponse<>(
                detectionService
                        .listDetections(pageRequest, detectionTypes)
                        .map(DetectionAndDeviceDTO::new)
        );
    }

    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
    void processMalwareScan(@RequestBody MalwareScanDTO scan) {
        log.info("Processing malware scan {}", scan);

        val device = scan.device().toDevice();
        val time = scan.time();
        val detections = scan
                .detections()
                .stream()
                .map(d -> d.toDetection(device))
                .collect(Collectors.toList());

        detectionService.processMalwareScan(device, time, detections);
    }
}
