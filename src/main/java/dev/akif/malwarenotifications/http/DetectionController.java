package dev.akif.malwarenotifications.http;

import dev.akif.malwarenotifications.detection.DetectionService;
import dev.akif.malwarenotifications.detection.DetectionType;
import dev.akif.malwarenotifications.http.dto.DetectionAndDeviceDTO;
import dev.akif.malwarenotifications.http.dto.MalwareScanDTO;
import dev.akif.malwarenotifications.http.dto.PagedResponse;
import dev.akif.malwarenotifications.http.dto.SortableDetectionFields;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import lombok.val;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.Set;
import java.util.stream.Collectors;

@AllArgsConstructor
@RequestMapping("/detections")
@RestController
@Slf4j
@Tag(
        name = "Detections",
        description = "These endpoints are for storing and listing malware detections."
)
public class DetectionController {
    private final DetectionService detectionService;

    @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
    @Operation(
            summary = "List malware detections",
            description = "This endpoint can be used to list previously stored malware detections. It supports pagination, sorting and some basic filtering."
    )
    PagedResponse<DetectionAndDeviceDTO> listDetections(
            @Parameter(
                    name = "page",
                    in = ParameterIn.QUERY,
                    description = "Page number to get, defaults to 1"
            )
            @RequestParam(value = "page", required = false, defaultValue = "1")
            int page,
            @Parameter(
                    name = "perPage",
                    in = ParameterIn.QUERY,
                    description = "Number of items to get in a page, defaults to 10"
            )
            @RequestParam(value = "perPage", required = false, defaultValue = "10")
            int perPage,
            @Parameter(
                    name = "sortBy",
                    in = ParameterIn.QUERY,
                    description = "Field to sort by, defaults to TIME"
            )
            @RequestParam(value = "sortBy", required = false)
            SortableDetectionFields sortBy,
            @Parameter(
                    name = "ascending",
                    in = ParameterIn.QUERY,
                    description = "Whether or not sorting is ascending, defaults to false when sorting by TIME and to true for other sorts"
            )
            @RequestParam(value = "ascending", required = false)
            Boolean ascending,
            @Parameter(
                    name = "type",
                    in = ParameterIn.QUERY,
                    description = "Type of malware detection to get, defaults to nothing to get all types"
            )
            @RequestParam(value = "type", required = false)
            DetectionType detectionType
    ) {
        val sortColumn = sortBy == null ? SortableDetectionFields.TIME.column : sortBy.column;
        val sortingByTime = SortableDetectionFields.TIME.column.equals(sortColumn);
        val isAscending = ascending == null ? !sortingByTime : ascending;

        val detectionTypes = detectionType == null ? DetectionType.all() : Set.of(detectionType);
        val pageRequest = PageRequest.of(page - 1, perPage, Sort.by(isAscending ? Sort.Order.asc(sortColumn).nullsLast() : Sort.Order.desc(sortColumn).nullsLast()));

        log.info("Listing {} malware detections as {}", detectionTypes, pageRequest);

        return new PagedResponse<>(
                detectionService
                        .listDetections(pageRequest, detectionTypes)
                        .map(DetectionAndDeviceDTO::new)
        );
    }

    @Operation(
            summary = "Process malware scan",
            description = "This endpoint can be used to process a malware scan coming from a device and store given detections."
    )
    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
    void processMalwareScan(
            @io.swagger.v3.oas.annotations.parameters.RequestBody(description = "Malware scan to process")
            @RequestBody MalwareScanDTO scan
    ) {
        log.info("Processing malware scan {}", scan);

        val device = scan.device().toDevice();
        val time = scan.time();
        val detections = scan
                .detections()
                .stream()
                .map(d -> d.toDetection(device))
                .collect(Collectors.toList());

        detectionService.processMalwareScan(device, time, detections);
    }
}
