package dev.akif.malwarenotifications.http;

import dev.akif.malwarenotifications.detection.DetectionService;
import dev.akif.malwarenotifications.http.dto.DetectionAndDeviceDTO;
import dev.akif.malwarenotifications.http.dto.MalwareScanDTO;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import lombok.val;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;
import java.util.stream.Collectors;

@AllArgsConstructor
@RequestMapping("/detections")
@RestController
@Slf4j
public class DetectionController {
    private final DetectionService detectionService;

    @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
    List<DetectionAndDeviceDTO> listDetections() {
        log.info("Listing malware detections");

        return detectionService
                .listDetections()
                .stream()
                .map(DetectionAndDeviceDTO::new)
                .collect(Collectors.toList());
    }

    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(code = HttpStatus.CREATED)
    void processMalwareScan(@RequestBody MalwareScanDTO scan) {
        log.info("Processing malware scan {}", scan);

        val device = scan.device().toDevice();
        val time = scan.time();
        val detections = scan
                .detections()
                .stream()
                .map(d -> d.toDetection(device))
                .collect(Collectors.toList());

        detectionService.processMalwareScan(device, time, detections);
    }
}
