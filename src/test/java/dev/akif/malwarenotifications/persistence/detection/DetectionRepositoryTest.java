package dev.akif.malwarenotifications.persistence.detection;

import dev.akif.malwarenotifications.TestData;
import dev.akif.malwarenotifications.detection.DetectionType;
import dev.akif.malwarenotifications.persistence.device.DeviceCrudRepository;
import dev.akif.malwarenotifications.persistence.device.DeviceEntity;
import dev.akif.malwarenotifications.persistence.device.DeviceRepository;
import dev.akif.malwarenotifications.persistence.device.InMemoryDeviceRepository;
import lombok.NonNull;
import lombok.val;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.parallel.Isolated;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

import static dev.akif.malwarenotifications.TestUtils.assertPageHas;
import static org.junit.jupiter.api.Assertions.assertEquals;

@Isolated
@SpringBootTest
public class DetectionRepositoryTest {
    private final DeviceEntity iPhone = TestData.iPhoneEntity();
    private final DeviceEntity onePlus = TestData.onePlusEntity();
    private final DetectionEntity facebook = TestData.facebookEntity();
    private final DetectionEntity instagram = TestData.instagramEntity();
    private final DetectionEntity whatsApp = TestData.whatsAppEntity();
    @Autowired
    private DeviceCrudRepository deviceCrudRepository;
    @Autowired
    private DetectionCrudRepository crudRepository;
    private InMemoryDeviceRepository inMemoryDeviceRepository;
    private InMemoryDetectionRepository inMemoryRepository;

    private void deleteAllData() {
        crudRepository.deleteAll();
        deviceCrudRepository.deleteAll();

        inMemoryDeviceRepository = new InMemoryDeviceRepository();
        inMemoryRepository = new InMemoryDetectionRepository(inMemoryDeviceRepository);
    }

    private void insertTestData() {
        val devices = List.of(iPhone, onePlus);
        deviceCrudRepository.saveAll(devices);
        devices.forEach(inMemoryDeviceRepository::createOrUpdate);

        val detections = List.of(facebook, instagram, whatsApp);
        crudRepository.createOrUpdateAll(detections);
        inMemoryRepository.createOrUpdateAll(detections);
    }

    @BeforeEach
    @Transactional
    void beforeEach() {
        deleteAllData();
        insertTestData();
    }

    @Test
    @DisplayName("Finding all detections sorted by time descending")
    void testFindAllSortedByTimeDescending() {
        testFindAllSortedByTimeDescendingFor(crudRepository);
        testFindAllSortedByTimeDescendingFor(inMemoryRepository);
    }

    @Test
    @DisplayName("Finding detections by device id")
    void testFindByDeviceIdSortedByTimeDescending() {
        testFindByDeviceIdSortedByTimeDescending(crudRepository);
        testFindByDeviceIdSortedByTimeDescending(inMemoryRepository);
    }

    @Test
    @DisplayName("Creating new detections")
    void testCreateAll() {
        deleteAllData();
        testCreateAll(deviceCrudRepository, crudRepository);
        testCreateAll(inMemoryDeviceRepository, inMemoryRepository);
    }

    @Test
    @DisplayName("Updating existing detections")
    void testUpdateAll() {
        testUpdateAll(crudRepository);
        testUpdateAll(inMemoryRepository);
    }

    void testFindAllSortedByTimeDescendingFor(@NonNull DetectionRepository repo) {
        assertPageHas(
                List.of(facebook, instagram, whatsApp),
                repo.findAll(TestData.defaultPage(), DetectionType.all())
        );
    }

    void testFindByDeviceIdSortedByTimeDescending(@NonNull DetectionRepository repo) {
        assertEquals(List.of(facebook, instagram), repo.findByDeviceId(iPhone.getId()));
    }

    void testCreateAll(@NonNull DeviceRepository deviceRepo, @NonNull DetectionRepository repo) {
        deleteAllData();

        assertEquals(Optional.empty(), deviceRepo.findById(iPhone.getId()));
        assertPageHas(List.of(), repo.findAll(TestData.defaultPage(), DetectionType.all()));

        deviceRepo.createOrUpdate(iPhone);
        repo.createOrUpdateAll(List.of(facebook, instagram));

        assertEquals(Optional.of(iPhone), deviceRepo.findById(iPhone.getId()));
        assertPageHas(
                List.of(facebook, instagram),
                repo.findAll(TestData.defaultPage(), DetectionType.all())
        );
    }

    void testUpdateAll(@NonNull DetectionRepository repo) {
        assertPageHas(
                List.of(facebook, instagram, whatsApp),
                repo.findAll(TestData.defaultPage(), DetectionType.all())
        );

        val resolvedFacebook = new DetectionEntity(facebook.toDetection());
        resolvedFacebook.setType(DetectionType.RESOLVED);
        val updatedInstagram = new DetectionEntity(instagram.toDetection());
        updatedInstagram.setTime(instagram.getTime().plusSeconds(5));

        repo.createOrUpdateAll(List.of(resolvedFacebook, updatedInstagram));

        assertPageHas(
            List.of(updatedInstagram, resolvedFacebook, whatsApp),
            repo.findAll(TestData.defaultPage(), DetectionType.all())
        );
    }
}
