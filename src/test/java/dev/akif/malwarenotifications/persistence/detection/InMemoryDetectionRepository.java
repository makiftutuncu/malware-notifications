package dev.akif.malwarenotifications.persistence.detection;

import dev.akif.malwarenotifications.detection.DetectionType;
import dev.akif.malwarenotifications.persistence.device.DeviceRepository;
import lombok.NonNull;
import lombok.val;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;

import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

public class InMemoryDetectionRepository implements DetectionRepository {
    private final DeviceRepository devices;
    private final Map<UUID, DetectionEntity> detections = new HashMap<>();

    private final Comparator<DetectionEntity> defaultComparator =
            Comparator
            .comparing(DetectionEntity::getTime).reversed()
            .thenComparing(DetectionEntity::getAppName);

    public InMemoryDetectionRepository(@NonNull DeviceRepository devices, @NonNull DetectionEntity... detectionEntities) {
        this.devices = devices;
        for (DetectionEntity detectionEntity : detectionEntities) {
            detections.put(detectionEntity.getId(), detectionEntity);
        }
    }

    @Override
    public @NonNull Page<DetectionEntity> findAll(@NonNull Pageable pageable, @NonNull Set<DetectionType> detectionTypes) {
        val all = detections
                .values()
                .stream()
                .filter(d -> detectionTypes.contains(d.getType()))
                .sorted(defaultComparator) // TODO: Use pageable
                .toList();
        return new PageImpl<>(all, pageable, all.size());
    }

    @Override
    public @NonNull List<DetectionEntity> findByDeviceId(@NonNull UUID deviceId) {
        return detections
                .values()
                .stream()
                .filter(d -> d.getDevice().getId().equals(deviceId))
                .sorted(defaultComparator)
                .toList();
    }

    @Override
    public void createOrUpdateAll(@NonNull List<DetectionEntity> detectionEntities) {
        for (DetectionEntity detectionEntity : detectionEntities) {
            detections.put(detectionEntity.getId(), detectionEntity);
            devices.createOrUpdate(detectionEntity.getDevice());
        }
    }
}
