package dev.akif.malwarenotifications.persistence.device;

import dev.akif.malwarenotifications.TestData;
import lombok.NonNull;
import lombok.val;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.parallel.Isolated;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.testcontainers.junit.jupiter.Testcontainers;

import java.util.Optional;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertEquals;

@Isolated
@SpringBootTest
@Testcontainers
public class DeviceRepositoryTest {
    private final DeviceEntity iPhone = TestData.iPhoneEntity();
    @Autowired
    private DeviceCrudRepository crudRepository;
    private InMemoryDeviceRepository inMemoryRepository = new InMemoryDeviceRepository();

    private void deleteAllData() {
        crudRepository.deleteAll();
        inMemoryRepository = new InMemoryDeviceRepository();
    }

    private void insertTestData() {
        crudRepository.createOrUpdate(iPhone);
        inMemoryRepository.createOrUpdate(iPhone);
    }

    @BeforeEach
    void beforeEach() {
        deleteAllData();
        insertTestData();
    }

    @Test
    @DisplayName("Finding a device by non-existing id")
    void testFindByNonExistingId() {
        testFindByNonExistingIdFor(crudRepository);
        testFindByNonExistingIdFor(inMemoryRepository);
    }

    @Test
    @DisplayName("Finding a device by id")
    void testFindById() {
        testFindByIdFor(crudRepository);
        testFindByIdFor(inMemoryRepository);
    }

    @Test
    @DisplayName("Creating a new device")
    void testCreate() {
        testCreateFor(crudRepository);
        testCreateFor(inMemoryRepository);
    }

    @Test
    @DisplayName("Updating an existing device")
    void testUpdate() {
        testUpdateFor(crudRepository);
        testUpdateFor(inMemoryRepository);
    }

    void testFindByNonExistingIdFor(@NonNull DeviceRepository repo) {
        assertEquals(Optional.empty(), repo.findById(UUID.randomUUID()));
    }

    void testFindByIdFor(@NonNull DeviceRepository repo) {
        assertEquals(Optional.of(iPhone), repo.findById(iPhone.getId()));
    }

    void testCreateFor(@NonNull DeviceRepository repo) {
        val onePlus = TestData.onePlusEntity();

        assertEquals(Optional.empty(), repo.findById(onePlus.getId()));
        repo.createOrUpdate(onePlus);
        assertEquals(Optional.of(onePlus), repo.findById(onePlus.getId()));
    }

    void testUpdateFor(@NonNull DeviceRepository repo) {
        val updatedIPhone = new DeviceEntity(iPhone.toDevice());
        updatedIPhone.setOs("iOS 16");

        val before = repo.findById(iPhone.getId());
        assertEquals("iOS 15.4", before.map(DeviceEntity::getOs).orElse(""));
        repo.createOrUpdate(updatedIPhone);
        val after = repo.findById(iPhone.getId());
        assertEquals("iOS 16", after.map(DeviceEntity::getOs).orElse(""));
    }
}
