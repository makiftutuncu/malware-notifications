package dev.akif.malwarenotifications.detection;

import dev.akif.malwarenotifications.TestData;
import dev.akif.malwarenotifications.persistence.detection.DetectionEntity;
import dev.akif.malwarenotifications.persistence.detection.InMemoryDetectionRepository;
import dev.akif.malwarenotifications.persistence.device.InMemoryDeviceRepository;
import lombok.val;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.time.Instant;
import java.util.List;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class DetectionServiceTest {
    @Test
    @DisplayName("Listing detections with no detections")
    void testListNoDetections() {
        val devices = new InMemoryDeviceRepository();
        val detections = new InMemoryDetectionRepository(devices);
        val service = new DetectionServiceImpl(devices, detections);

        assertEquals(List.of(), service.listDetections());
    }

    @Test
    @DisplayName("Listing detections with some detections")
    void testListSomeDetections() {
        val devices = new InMemoryDeviceRepository(TestData.iPhoneEntity(), TestData.onePlusEntity());
        val detections = new InMemoryDetectionRepository(devices, TestData.facebookEntity(), TestData.instagramEntity(), TestData.whatsAppEntity());
        val service = new DetectionServiceImpl(devices, detections);

        assertEquals(
                List.of(TestData.facebook, TestData.instagram, TestData.whatsApp),
                service.listDetections()
        );
    }

    @Test
    @DisplayName("Processing a malware scan")
    void testProcessMalwareScan() {
        val now = TestData.now;

        val devices = new InMemoryDeviceRepository(TestData.iPhoneEntity(), TestData.onePlusEntity());
        val detections = new InMemoryDetectionRepository(devices, TestData.facebookEntity(), TestData.instagramEntity(), TestData.whatsAppEntity());
        val service = new DetectionServiceImpl(devices, detections);

        val device = TestData.iPhone;
        val pirateBank = new Detection(UUID.randomUUID(), device, now, DetectionType.NEW, "PirateBank", "Banking");
        val newInstagram = new Detection(TestData.instagram.id(), device, now, DetectionType.NEW, "New Instagram", "Photography");

        service.processMalwareScan(device, now, List.of(pirateBank, newInstagram));

        val resolvedFacebook = new Detection(TestData.facebook.id(), device, now, DetectionType.RESOLVED, "Facebook", "Social");

        assertEquals(
                List.of(
                        new DetectionEntity(resolvedFacebook),
                        new DetectionEntity(newInstagram),
                        new DetectionEntity(pirateBank),
                        TestData.whatsAppEntity()
                ),
                detections.findAll()
        );
    }

    @Test
    @DisplayName("Processing a detection")
    void testProcessDetection() {
        val now = Instant.now();
        val iPhone = TestData.iPhoneEntity();

        // New detection
        assertEquals(
                TestData.facebookEntity(),
                DetectionServiceImpl.processDetection(
                        null,
                        TestData.facebook,
                        now
                )
        );

        // No-op
        assertEquals(
                TestData.facebookEntity(),
                DetectionServiceImpl.processDetection(
                        TestData.facebookEntity(),
                        TestData.facebook,
                        now
                )
        );

        // Updated detection
        assertEquals(
                new DetectionEntity(TestData.facebook.id(), iPhone, now.plusSeconds(1), DetectionType.NEW, "Facebook V2", "Social"),
                DetectionServiceImpl.processDetection(
                        TestData.facebookEntity(),
                        new Detection(TestData.facebook.id(), iPhone.toDevice(), now.plusSeconds(1), DetectionType.NEW, "Facebook V2", "Social"),
                        now
                )
        );

        // Existing resolved detection
        assertEquals(
                new DetectionEntity(TestData.facebook.id(), iPhone, now.plusSeconds(1), DetectionType.RESOLVED, "Facebook", "Social"),
                DetectionServiceImpl.processDetection(
                        TestData.facebookEntity(),
                        new Detection(TestData.facebook.id(), iPhone.toDevice(), now.plusSeconds(1), DetectionType.RESOLVED, null, null),
                        now
                )
        );

        // Missing resolved detection
        assertEquals(
                new DetectionEntity(TestData.facebook.id(), iPhone, now, DetectionType.RESOLVED, "Facebook", "Social"),
                DetectionServiceImpl.processDetection(
                        TestData.facebookEntity(),
                        null,
                        now
                )
        );
    }
}
